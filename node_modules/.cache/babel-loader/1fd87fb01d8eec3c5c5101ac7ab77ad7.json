{"ast":null,"code":"\"use strict\";\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _getModuleDependencies = _interopRequireDefault(require(\"./lib/getModuleDependencies\"));\n\nvar _registerConfigAsDependency = _interopRequireDefault(require(\"./lib/registerConfigAsDependency\"));\n\nvar _processTailwindFeatures = _interopRequireDefault(require(\"./processTailwindFeatures\"));\n\nvar _formatCSS = _interopRequireDefault(require(\"./lib/formatCSS\"));\n\nvar _resolveConfig = _interopRequireDefault(require(\"./util/resolveConfig\"));\n\nvar _constants = require(\"./constants\");\n\nvar _defaultConfigStub = _interopRequireDefault(require(\"../stubs/defaultConfig.stub.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction resolveConfigPath(filePath) {\n  // require('tailwindcss')({ theme: ..., variants: ... })\n  if (_lodash.default.isObject(filePath) && !_lodash.default.has(filePath, 'config') && !_lodash.default.isEmpty(filePath)) {\n    return undefined;\n  } // require('tailwindcss')({ config: 'custom-config.js' })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isString(filePath.config)) {\n    return _path.default.resolve(filePath.config);\n  } // require('tailwindcss')({ config: { theme: ..., variants: ... } })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isObject(filePath.config)) {\n    undefined;\n  } // require('tailwindcss')('custom-config.js')\n\n\n  if (_lodash.default.isString(filePath)) {\n    return _path.default.resolve(filePath);\n  } // require('tailwindcss')\n\n\n  try {\n    const defaultConfigPath = _path.default.resolve(_constants.defaultConfigFile);\n\n    _fs.default.accessSync(defaultConfigPath);\n\n    return defaultConfigPath;\n  } catch (err) {\n    return undefined;\n  }\n}\n\nconst getConfigFunction = config => () => {\n  if (_lodash.default.isUndefined(config) && !_lodash.default.isObject(config)) {\n    return (0, _resolveConfig.default)([_defaultConfigStub.default]);\n  } // Skip this if Jest is running: https://github.com/facebook/jest/pull/9841#issuecomment-621417584\n\n\n  if (process.env.JEST_WORKER_ID === undefined) {\n    if (!_lodash.default.isObject(config)) {\n      (0, _getModuleDependencies.default)(config).forEach(mdl => {\n        delete require.cache[require.resolve(mdl.file)];\n      });\n    }\n  }\n\n  const configObject = _lodash.default.isObject(config) ? _lodash.default.get(config, 'config', config) : require(config);\n  return (0, _resolveConfig.default)([configObject, _defaultConfigStub.default]);\n};\n\nconst plugin = _postcss.default.plugin('tailwind', config => {\n  const plugins = [];\n  const resolvedConfigPath = resolveConfigPath(config);\n\n  if (!_lodash.default.isUndefined(resolvedConfigPath)) {\n    plugins.push((0, _registerConfigAsDependency.default)(resolvedConfigPath));\n  }\n\n  return (0, _postcss.default)([...plugins, (0, _processTailwindFeatures.default)(getConfigFunction(resolvedConfigPath || config)), _formatCSS.default]);\n});\n\nmodule.exports = plugin;","map":{"version":3,"sources":["/home/daniel/work/projet/portfolio/node_modules/tailwindcss/lib/index.js"],"names":["_path","_interopRequireDefault","require","_fs","_lodash","_postcss","_getModuleDependencies","_registerConfigAsDependency","_processTailwindFeatures","_formatCSS","_resolveConfig","_constants","_defaultConfigStub","obj","__esModule","default","resolveConfigPath","filePath","isObject","has","isEmpty","undefined","isString","config","resolve","defaultConfigPath","defaultConfigFile","accessSync","err","getConfigFunction","isUndefined","process","env","JEST_WORKER_ID","forEach","mdl","cache","file","configObject","get","plugin","plugins","resolvedConfigPath","push","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _getModuleDependencies = _interopRequireDefault(require(\"./lib/getModuleDependencies\"));\n\nvar _registerConfigAsDependency = _interopRequireDefault(require(\"./lib/registerConfigAsDependency\"));\n\nvar _processTailwindFeatures = _interopRequireDefault(require(\"./processTailwindFeatures\"));\n\nvar _formatCSS = _interopRequireDefault(require(\"./lib/formatCSS\"));\n\nvar _resolveConfig = _interopRequireDefault(require(\"./util/resolveConfig\"));\n\nvar _constants = require(\"./constants\");\n\nvar _defaultConfigStub = _interopRequireDefault(require(\"../stubs/defaultConfig.stub.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction resolveConfigPath(filePath) {\n  // require('tailwindcss')({ theme: ..., variants: ... })\n  if (_lodash.default.isObject(filePath) && !_lodash.default.has(filePath, 'config') && !_lodash.default.isEmpty(filePath)) {\n    return undefined;\n  } // require('tailwindcss')({ config: 'custom-config.js' })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isString(filePath.config)) {\n    return _path.default.resolve(filePath.config);\n  } // require('tailwindcss')({ config: { theme: ..., variants: ... } })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isObject(filePath.config)) {\n    undefined;\n  } // require('tailwindcss')('custom-config.js')\n\n\n  if (_lodash.default.isString(filePath)) {\n    return _path.default.resolve(filePath);\n  } // require('tailwindcss')\n\n\n  try {\n    const defaultConfigPath = _path.default.resolve(_constants.defaultConfigFile);\n\n    _fs.default.accessSync(defaultConfigPath);\n\n    return defaultConfigPath;\n  } catch (err) {\n    return undefined;\n  }\n}\n\nconst getConfigFunction = config => () => {\n  if (_lodash.default.isUndefined(config) && !_lodash.default.isObject(config)) {\n    return (0, _resolveConfig.default)([_defaultConfigStub.default]);\n  } // Skip this if Jest is running: https://github.com/facebook/jest/pull/9841#issuecomment-621417584\n\n\n  if (process.env.JEST_WORKER_ID === undefined) {\n    if (!_lodash.default.isObject(config)) {\n      (0, _getModuleDependencies.default)(config).forEach(mdl => {\n        delete require.cache[require.resolve(mdl.file)];\n      });\n    }\n  }\n\n  const configObject = _lodash.default.isObject(config) ? _lodash.default.get(config, 'config', config) : require(config);\n  return (0, _resolveConfig.default)([configObject, _defaultConfigStub.default]);\n};\n\nconst plugin = _postcss.default.plugin('tailwind', config => {\n  const plugins = [];\n  const resolvedConfigPath = resolveConfigPath(config);\n\n  if (!_lodash.default.isUndefined(resolvedConfigPath)) {\n    plugins.push((0, _registerConfigAsDependency.default)(resolvedConfigPath));\n  }\n\n  return (0, _postcss.default)([...plugins, (0, _processTailwindFeatures.default)(getConfigFunction(resolvedConfigPath || config)), _formatCSS.default]);\n});\n\nmodule.exports = plugin;"]},"metadata":{},"sourceType":"script"}