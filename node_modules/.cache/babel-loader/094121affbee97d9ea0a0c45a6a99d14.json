{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"../util/cloneNodes\"));\n\nvar _buildMediaQuery = _interopRequireDefault(require(\"../util/buildMediaQuery\"));\n\nvar _buildSelectorVariant = _interopRequireDefault(require(\"../util/buildSelectorVariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _default(config) {\n  return function (css) {\n    const {\n      theme: {\n        screens\n      },\n      separator\n    } = config;\n\n    const responsiveRules = _postcss.default.root();\n\n    const finalRules = [];\n    css.walkAtRules('responsive', atRule => {\n      const nodes = atRule.nodes;\n      responsiveRules.append(...(0, _cloneNodes.default)(nodes));\n      atRule.before(nodes);\n      atRule.remove();\n    });\n\n    _lodash.default.keys(screens).forEach(screen => {\n      const mediaQuery = _postcss.default.atRule({\n        name: 'media',\n        params: (0, _buildMediaQuery.default)(screens[screen])\n      });\n\n      mediaQuery.append(_lodash.default.tap(responsiveRules.clone(), clonedRoot => {\n        clonedRoot.walkRules(rule => {\n          rule.selectors = _lodash.default.map(rule.selectors, selector => (0, _buildSelectorVariant.default)(selector, screen, separator, message => {\n            throw rule.error(message);\n          }));\n        });\n      }));\n      finalRules.push(mediaQuery);\n    });\n\n    const hasScreenRules = finalRules.some(i => i.nodes.length !== 0);\n    css.walkAtRules('tailwind', atRule => {\n      if (atRule.params !== 'screens') {\n        return;\n      }\n\n      if (hasScreenRules) {\n        atRule.before(finalRules);\n      }\n\n      atRule.remove();\n    });\n  };\n}","map":{"version":3,"sources":["/home/daniel/work/projet/portfolio/node_modules/tailwindcss/lib/lib/substituteResponsiveAtRules.js"],"names":["Object","defineProperty","exports","value","default","_default","_lodash","_interopRequireDefault","require","_postcss","_cloneNodes","_buildMediaQuery","_buildSelectorVariant","obj","__esModule","config","css","theme","screens","separator","responsiveRules","root","finalRules","walkAtRules","atRule","nodes","append","before","remove","keys","forEach","screen","mediaQuery","name","params","tap","clone","clonedRoot","walkRules","rule","selectors","map","selector","message","error","push","hasScreenRules","some","i","length"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"../util/cloneNodes\"));\n\nvar _buildMediaQuery = _interopRequireDefault(require(\"../util/buildMediaQuery\"));\n\nvar _buildSelectorVariant = _interopRequireDefault(require(\"../util/buildSelectorVariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _default(config) {\n  return function (css) {\n    const {\n      theme: {\n        screens\n      },\n      separator\n    } = config;\n\n    const responsiveRules = _postcss.default.root();\n\n    const finalRules = [];\n    css.walkAtRules('responsive', atRule => {\n      const nodes = atRule.nodes;\n      responsiveRules.append(...(0, _cloneNodes.default)(nodes));\n      atRule.before(nodes);\n      atRule.remove();\n    });\n\n    _lodash.default.keys(screens).forEach(screen => {\n      const mediaQuery = _postcss.default.atRule({\n        name: 'media',\n        params: (0, _buildMediaQuery.default)(screens[screen])\n      });\n\n      mediaQuery.append(_lodash.default.tap(responsiveRules.clone(), clonedRoot => {\n        clonedRoot.walkRules(rule => {\n          rule.selectors = _lodash.default.map(rule.selectors, selector => (0, _buildSelectorVariant.default)(selector, screen, separator, message => {\n            throw rule.error(message);\n          }));\n        });\n      }));\n      finalRules.push(mediaQuery);\n    });\n\n    const hasScreenRules = finalRules.some(i => i.nodes.length !== 0);\n    css.walkAtRules('tailwind', atRule => {\n      if (atRule.params !== 'screens') {\n        return;\n      }\n\n      if (hasScreenRules) {\n        atRule.before(finalRules);\n      }\n\n      atRule.remove();\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}