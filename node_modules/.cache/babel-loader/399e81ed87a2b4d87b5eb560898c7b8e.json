{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = purgeUnusedUtilities;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssPurgecss = _interopRequireDefault(require(\"@fullhuman/postcss-purgecss\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _utils = require(\"../cli/utils\");\n\nvar emoji = _interopRequireWildcard(require(\"../cli/emoji\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction removeTailwindComments(css) {\n  css.walkComments(comment => {\n    switch (comment.text.trim()) {\n      case 'tailwind start components':\n      case 'tailwind start utilities':\n      case 'tailwind start screens':\n      case 'tailwind end components':\n      case 'tailwind end utilities':\n      case 'tailwind end screens':\n        comment.remove();\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction purgeUnusedUtilities(config) {\n  const purgeEnabled = _lodash.default.get(config, 'purge.enabled', config.purge !== false && config.purge !== undefined && process.env.NODE_ENV === 'production');\n\n  if (!purgeEnabled) {\n    return removeTailwindComments;\n  } // Skip if `purge: []` since that's part of the default config\n\n\n  if (Array.isArray(config.purge) && config.purge.length === 0) {\n    (0, _utils.log)();\n    (0, _utils.log)(emoji.warning, _chalk.default.yellow(' Tailwind is not purging unused styles because no template paths have been provided.'));\n    (0, _utils.log)(_chalk.default.white('   If you have manually configured PurgeCSS outside of Tailwind or are deliberately not\\n      removing unused styles, set `purge: false` in your Tailwind config file to silence\\n      this warning.'));\n    (0, _utils.log)(_chalk.default.white('\\n      https://tailwindcss.com/docs/controlling-file-size/#removing-unused-css'));\n    return removeTailwindComments;\n  }\n\n  return (0, _postcss.default)([function (css) {\n    const mode = _lodash.default.get(config, 'purge.mode', 'conservative');\n\n    if (mode === 'conservative') {\n      css.prepend(_postcss.default.comment({\n        text: 'purgecss start ignore'\n      }));\n      css.append(_postcss.default.comment({\n        text: 'purgecss end ignore'\n      }));\n      css.walkComments(comment => {\n        switch (comment.text.trim()) {\n          case 'tailwind start utilities':\n          case 'tailwind start screens':\n            comment.text = 'purgecss end ignore';\n            break;\n\n          case 'tailwind end utilities':\n          case 'tailwind end screens':\n            comment.text = 'purgecss start ignore';\n            break;\n\n          default:\n            break;\n        }\n      });\n    } else if (mode === 'all') {\n      removeTailwindComments(css);\n    }\n  }, (0, _postcssPurgecss.default)({\n    content: Array.isArray(config.purge) ? config.purge : config.purge.content,\n    defaultExtractor: content => {\n      // Capture as liberally as possible, including things like `h-(screen-1.5)`\n      const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || []; // Capture classes within other delimiters like .block(class=\"w-1/2\") in Pug\n\n      const innerMatches = content.match(/[^<>\"'`\\s.(){}\\[\\]#=%]*[^<>\"'`\\s.(){}\\[\\]#=%:]/g) || [];\n      return broadMatches.concat(innerMatches);\n    },\n    ...config.purge.options\n  })]);\n}","map":{"version":3,"sources":["/home/daniel/work/projet/portfolio/node_modules/tailwindcss/lib/lib/purgeUnusedStyles.js"],"names":["Object","defineProperty","exports","value","default","purgeUnusedUtilities","_lodash","_interopRequireDefault","require","_postcss","_postcssPurgecss","_chalk","_utils","emoji","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","removeTailwindComments","css","walkComments","comment","text","trim","remove","config","purgeEnabled","purge","undefined","process","env","NODE_ENV","Array","isArray","length","log","warning","yellow","white","mode","prepend","append","content","defaultExtractor","broadMatches","match","innerMatches","concat","options"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = purgeUnusedUtilities;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssPurgecss = _interopRequireDefault(require(\"@fullhuman/postcss-purgecss\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _utils = require(\"../cli/utils\");\n\nvar emoji = _interopRequireWildcard(require(\"../cli/emoji\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction removeTailwindComments(css) {\n  css.walkComments(comment => {\n    switch (comment.text.trim()) {\n      case 'tailwind start components':\n      case 'tailwind start utilities':\n      case 'tailwind start screens':\n      case 'tailwind end components':\n      case 'tailwind end utilities':\n      case 'tailwind end screens':\n        comment.remove();\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction purgeUnusedUtilities(config) {\n  const purgeEnabled = _lodash.default.get(config, 'purge.enabled', config.purge !== false && config.purge !== undefined && process.env.NODE_ENV === 'production');\n\n  if (!purgeEnabled) {\n    return removeTailwindComments;\n  } // Skip if `purge: []` since that's part of the default config\n\n\n  if (Array.isArray(config.purge) && config.purge.length === 0) {\n    (0, _utils.log)();\n    (0, _utils.log)(emoji.warning, _chalk.default.yellow(' Tailwind is not purging unused styles because no template paths have been provided.'));\n    (0, _utils.log)(_chalk.default.white('   If you have manually configured PurgeCSS outside of Tailwind or are deliberately not\\n      removing unused styles, set `purge: false` in your Tailwind config file to silence\\n      this warning.'));\n    (0, _utils.log)(_chalk.default.white('\\n      https://tailwindcss.com/docs/controlling-file-size/#removing-unused-css'));\n    return removeTailwindComments;\n  }\n\n  return (0, _postcss.default)([function (css) {\n    const mode = _lodash.default.get(config, 'purge.mode', 'conservative');\n\n    if (mode === 'conservative') {\n      css.prepend(_postcss.default.comment({\n        text: 'purgecss start ignore'\n      }));\n      css.append(_postcss.default.comment({\n        text: 'purgecss end ignore'\n      }));\n      css.walkComments(comment => {\n        switch (comment.text.trim()) {\n          case 'tailwind start utilities':\n          case 'tailwind start screens':\n            comment.text = 'purgecss end ignore';\n            break;\n\n          case 'tailwind end utilities':\n          case 'tailwind end screens':\n            comment.text = 'purgecss start ignore';\n            break;\n\n          default:\n            break;\n        }\n      });\n    } else if (mode === 'all') {\n      removeTailwindComments(css);\n    }\n  }, (0, _postcssPurgecss.default)({\n    content: Array.isArray(config.purge) ? config.purge : config.purge.content,\n    defaultExtractor: content => {\n      // Capture as liberally as possible, including things like `h-(screen-1.5)`\n      const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || []; // Capture classes within other delimiters like .block(class=\"w-1/2\") in Pug\n\n      const innerMatches = content.match(/[^<>\"'`\\s.(){}\\[\\]#=%]*[^<>\"'`\\s.(){}\\[\\]#=%:]/g) || [];\n      return broadMatches.concat(innerMatches);\n    },\n    ...config.purge.options\n  })]);\n}"]},"metadata":{},"sourceType":"script"}