{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _browserslist = _interopRequireDefault(require(\"browserslist\"));\n\nvar _node = _interopRequireDefault(require(\"postcss/lib/node\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _escapeClassName = _interopRequireDefault(require(\"../util/escapeClassName\"));\n\nvar _generateVariantFunction = _interopRequireDefault(require(\"../util/generateVariantFunction\"));\n\nvar _parseObjectStyles = _interopRequireDefault(require(\"../util/parseObjectStyles\"));\n\nvar _prefixSelector = _interopRequireDefault(require(\"../util/prefixSelector\"));\n\nvar _wrapWithVariants = _interopRequireDefault(require(\"../util/wrapWithVariants\"));\n\nvar _increaseSpecificity = _interopRequireDefault(require(\"../util/increaseSpecificity\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction parseStyles(styles) {\n  if (!Array.isArray(styles)) {\n    return parseStyles([styles]);\n  }\n\n  return _lodash.default.flatMap(styles, style => style instanceof _node.default ? style : (0, _parseObjectStyles.default)(style));\n}\n\nfunction containsClass(value) {\n  return (0, _postcssSelectorParser.default)(selectors => {\n    let classFound = false;\n    selectors.walkClasses(() => classFound = true);\n    return classFound;\n  }).transformSync(value);\n}\n\nfunction _default(plugins, config) {\n  const pluginBaseStyles = [];\n  const pluginComponents = [];\n  const pluginUtilities = [];\n  const pluginVariantGenerators = {};\n\n  const applyConfiguredPrefix = selector => {\n    return (0, _prefixSelector.default)(config.prefix, selector);\n  };\n\n  const getConfigValue = (path, defaultValue) => _lodash.default.get(config, path, defaultValue);\n\n  const browserslistTarget = (0, _browserslist.default)().includes('ie 11') ? 'ie11' : 'relaxed';\n  plugins.forEach(plugin => {\n    if (plugin.__isOptionsFunction) {\n      plugin = plugin();\n    }\n\n    const handler = (0, _isFunction.default)(plugin) ? plugin : _lodash.default.get(plugin, 'handler', () => {});\n    handler({\n      postcss: _postcss.default,\n      config: getConfigValue,\n      theme: (path, defaultValue) => getConfigValue(`theme.${path}`, defaultValue),\n      corePlugins: path => {\n        if (Array.isArray(config.corePlugins)) {\n          return config.corePlugins.includes(path);\n        }\n\n        return getConfigValue(`corePlugins.${path}`, true);\n      },\n      variants: (path, defaultValue) => {\n        if (Array.isArray(config.variants)) {\n          return config.variants;\n        }\n\n        return getConfigValue(`variants.${path}`, defaultValue);\n      },\n      target: path => {\n        if (_lodash.default.isString(config.target)) {\n          return config.target === 'browserslist' ? browserslistTarget : config.target;\n        }\n\n        const [defaultTarget, targetOverrides] = getConfigValue('target');\n\n        const target = _lodash.default.get(targetOverrides, path, defaultTarget);\n\n        return target === 'browserslist' ? browserslistTarget : target;\n      },\n      e: _escapeClassName.default,\n      prefix: applyConfiguredPrefix,\n      addUtilities: (utilities, options) => {\n        const defaultOptions = {\n          variants: [],\n          respectPrefix: true,\n          respectImportant: true\n        };\n        options = Array.isArray(options) ? Object.assign({}, defaultOptions, {\n          variants: options\n        }) : _lodash.default.defaults(options, defaultOptions);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(utilities)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n\n          if (options.respectImportant && _lodash.default.get(config, 'important')) {\n            if (config.important === true) {\n              rule.walkDecls(decl => decl.important = true);\n            } else if (typeof config.important === 'string') {\n              if (containsClass(config.important)) {\n                throw rule.error(`Classes are not allowed when using the \\`important\\` option with a string argument. Please use an ID instead.`);\n              }\n\n              rule.selectors = rule.selectors.map(selector => {\n                return (0, _increaseSpecificity.default)(config.important, selector);\n              });\n            }\n          }\n        });\n        pluginUtilities.push((0, _wrapWithVariants.default)(styles.nodes, options.variants));\n      },\n      addComponents: (components, options) => {\n        options = Object.assign({\n          respectPrefix: true\n        }, options);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(components)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n        });\n        pluginComponents.push(...styles.nodes);\n      },\n      addBase: baseStyles => {\n        pluginBaseStyles.push(...parseStyles(baseStyles));\n      },\n      addVariant: (name, generator) => {\n        pluginVariantGenerators[name] = (0, _generateVariantFunction.default)(generator);\n      }\n    });\n  });\n  return {\n    base: pluginBaseStyles,\n    components: pluginComponents,\n    utilities: pluginUtilities,\n    variantGenerators: pluginVariantGenerators\n  };\n}","map":{"version":3,"sources":["/home/daniel/work/projet/portfolio/node_modules/tailwindcss/lib/util/processPlugins.js"],"names":["Object","defineProperty","exports","value","default","_default","_lodash","_interopRequireDefault","require","_postcss","_browserslist","_node","_isFunction","_escapeClassName","_generateVariantFunction","_parseObjectStyles","_prefixSelector","_wrapWithVariants","_increaseSpecificity","_postcssSelectorParser","obj","__esModule","parseStyles","styles","Array","isArray","flatMap","style","containsClass","selectors","classFound","walkClasses","transformSync","plugins","config","pluginBaseStyles","pluginComponents","pluginUtilities","pluginVariantGenerators","applyConfiguredPrefix","selector","prefix","getConfigValue","path","defaultValue","get","browserslistTarget","includes","forEach","plugin","__isOptionsFunction","handler","postcss","theme","corePlugins","variants","target","isString","defaultTarget","targetOverrides","e","addUtilities","utilities","options","defaultOptions","respectPrefix","respectImportant","assign","defaults","root","nodes","walkRules","rule","important","walkDecls","decl","error","map","push","addComponents","components","addBase","baseStyles","addVariant","name","generator","base","variantGenerators"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _browserslist = _interopRequireDefault(require(\"browserslist\"));\n\nvar _node = _interopRequireDefault(require(\"postcss/lib/node\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _escapeClassName = _interopRequireDefault(require(\"../util/escapeClassName\"));\n\nvar _generateVariantFunction = _interopRequireDefault(require(\"../util/generateVariantFunction\"));\n\nvar _parseObjectStyles = _interopRequireDefault(require(\"../util/parseObjectStyles\"));\n\nvar _prefixSelector = _interopRequireDefault(require(\"../util/prefixSelector\"));\n\nvar _wrapWithVariants = _interopRequireDefault(require(\"../util/wrapWithVariants\"));\n\nvar _increaseSpecificity = _interopRequireDefault(require(\"../util/increaseSpecificity\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parseStyles(styles) {\n  if (!Array.isArray(styles)) {\n    return parseStyles([styles]);\n  }\n\n  return _lodash.default.flatMap(styles, style => style instanceof _node.default ? style : (0, _parseObjectStyles.default)(style));\n}\n\nfunction containsClass(value) {\n  return (0, _postcssSelectorParser.default)(selectors => {\n    let classFound = false;\n    selectors.walkClasses(() => classFound = true);\n    return classFound;\n  }).transformSync(value);\n}\n\nfunction _default(plugins, config) {\n  const pluginBaseStyles = [];\n  const pluginComponents = [];\n  const pluginUtilities = [];\n  const pluginVariantGenerators = {};\n\n  const applyConfiguredPrefix = selector => {\n    return (0, _prefixSelector.default)(config.prefix, selector);\n  };\n\n  const getConfigValue = (path, defaultValue) => _lodash.default.get(config, path, defaultValue);\n\n  const browserslistTarget = (0, _browserslist.default)().includes('ie 11') ? 'ie11' : 'relaxed';\n  plugins.forEach(plugin => {\n    if (plugin.__isOptionsFunction) {\n      plugin = plugin();\n    }\n\n    const handler = (0, _isFunction.default)(plugin) ? plugin : _lodash.default.get(plugin, 'handler', () => {});\n    handler({\n      postcss: _postcss.default,\n      config: getConfigValue,\n      theme: (path, defaultValue) => getConfigValue(`theme.${path}`, defaultValue),\n      corePlugins: path => {\n        if (Array.isArray(config.corePlugins)) {\n          return config.corePlugins.includes(path);\n        }\n\n        return getConfigValue(`corePlugins.${path}`, true);\n      },\n      variants: (path, defaultValue) => {\n        if (Array.isArray(config.variants)) {\n          return config.variants;\n        }\n\n        return getConfigValue(`variants.${path}`, defaultValue);\n      },\n      target: path => {\n        if (_lodash.default.isString(config.target)) {\n          return config.target === 'browserslist' ? browserslistTarget : config.target;\n        }\n\n        const [defaultTarget, targetOverrides] = getConfigValue('target');\n\n        const target = _lodash.default.get(targetOverrides, path, defaultTarget);\n\n        return target === 'browserslist' ? browserslistTarget : target;\n      },\n      e: _escapeClassName.default,\n      prefix: applyConfiguredPrefix,\n      addUtilities: (utilities, options) => {\n        const defaultOptions = {\n          variants: [],\n          respectPrefix: true,\n          respectImportant: true\n        };\n        options = Array.isArray(options) ? Object.assign({}, defaultOptions, {\n          variants: options\n        }) : _lodash.default.defaults(options, defaultOptions);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(utilities)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n\n          if (options.respectImportant && _lodash.default.get(config, 'important')) {\n            if (config.important === true) {\n              rule.walkDecls(decl => decl.important = true);\n            } else if (typeof config.important === 'string') {\n              if (containsClass(config.important)) {\n                throw rule.error(`Classes are not allowed when using the \\`important\\` option with a string argument. Please use an ID instead.`);\n              }\n\n              rule.selectors = rule.selectors.map(selector => {\n                return (0, _increaseSpecificity.default)(config.important, selector);\n              });\n            }\n          }\n        });\n        pluginUtilities.push((0, _wrapWithVariants.default)(styles.nodes, options.variants));\n      },\n      addComponents: (components, options) => {\n        options = Object.assign({\n          respectPrefix: true\n        }, options);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(components)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n        });\n        pluginComponents.push(...styles.nodes);\n      },\n      addBase: baseStyles => {\n        pluginBaseStyles.push(...parseStyles(baseStyles));\n      },\n      addVariant: (name, generator) => {\n        pluginVariantGenerators[name] = (0, _generateVariantFunction.default)(generator);\n      }\n    });\n  });\n  return {\n    base: pluginBaseStyles,\n    components: pluginComponents,\n    utilities: pluginUtilities,\n    variantGenerators: pluginVariantGenerators\n  };\n}"]},"metadata":{},"sourceType":"script"}