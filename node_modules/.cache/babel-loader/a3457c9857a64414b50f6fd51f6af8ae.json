{"ast":null,"code":"var camelcase = require('camelcase-css');\n\nfunction atRule(node) {\n  if (typeof node.nodes === 'undefined') {\n    return true;\n  } else {\n    return process(node);\n  }\n}\n\nfunction process(node) {\n  var name;\n  var result = {};\n  node.each(function (child) {\n    if (child.type === 'atrule') {\n      name = '@' + child.name;\n      if (child.params) name += ' ' + child.params;\n\n      if (typeof result[name] === 'undefined') {\n        result[name] = atRule(child);\n      } else if (Array.isArray(result[name])) {\n        result[name].push(atRule(child));\n      } else {\n        result[name] = [result[name], atRule(child)];\n      }\n    } else if (child.type === 'rule') {\n      var body = process(child);\n\n      if (result[child.selector]) {\n        for (var i in body) {\n          result[child.selector][i] = body[i];\n        }\n      } else {\n        result[child.selector] = body;\n      }\n    } else if (child.type === 'decl') {\n      name = camelcase(child.prop);\n      var value = child.value;\n      if (child.important) value += ' !important';\n\n      if (typeof result[name] === 'undefined') {\n        result[name] = value;\n      } else if (Array.isArray(result[name])) {\n        result[name].push(value);\n      } else {\n        result[name] = [result[name], value];\n      }\n    }\n  });\n  return result;\n}\n\nmodule.exports = process;","map":{"version":3,"sources":["/home/daniel/work/projet/portfolio/node_modules/postcss-js/objectifier.js"],"names":["camelcase","require","atRule","node","nodes","process","name","result","each","child","type","params","Array","isArray","push","body","selector","i","prop","value","important","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AAEA,SAASC,MAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,WAA1B,EAAuC;AACrC,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOC,OAAO,CAACF,IAAD,CAAd;AACD;AACF;;AAED,SAASE,OAAT,CAAkBF,IAAlB,EAAwB;AACtB,MAAIG,IAAJ;AACA,MAAIC,MAAM,GAAG,EAAb;AAEAJ,EAAAA,IAAI,CAACK,IAAL,CAAU,UAAUC,KAAV,EAAiB;AACzB,QAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AAC3BJ,MAAAA,IAAI,GAAG,MAAMG,KAAK,CAACH,IAAnB;AACA,UAAIG,KAAK,CAACE,MAAV,EAAkBL,IAAI,IAAI,MAAMG,KAAK,CAACE,MAApB;;AAClB,UAAI,OAAOJ,MAAM,CAACD,IAAD,CAAb,KAAwB,WAA5B,EAAyC;AACvCC,QAAAA,MAAM,CAACD,IAAD,CAAN,GAAeJ,MAAM,CAACO,KAAD,CAArB;AACD,OAFD,MAEO,IAAIG,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACD,IAAD,CAApB,CAAJ,EAAiC;AACtCC,QAAAA,MAAM,CAACD,IAAD,CAAN,CAAaQ,IAAb,CAAkBZ,MAAM,CAACO,KAAD,CAAxB;AACD,OAFM,MAEA;AACLF,QAAAA,MAAM,CAACD,IAAD,CAAN,GAAe,CAACC,MAAM,CAACD,IAAD,CAAP,EAAeJ,MAAM,CAACO,KAAD,CAArB,CAAf;AACD;AACF,KAVD,MAUO,IAAIA,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;AAChC,UAAIK,IAAI,GAAGV,OAAO,CAACI,KAAD,CAAlB;;AACA,UAAIF,MAAM,CAACE,KAAK,CAACO,QAAP,CAAV,EAA4B;AAC1B,aAAK,IAAIC,CAAT,IAAcF,IAAd,EAAoB;AAClBR,UAAAA,MAAM,CAACE,KAAK,CAACO,QAAP,CAAN,CAAuBC,CAAvB,IAA4BF,IAAI,CAACE,CAAD,CAAhC;AACD;AACF,OAJD,MAIO;AACLV,QAAAA,MAAM,CAACE,KAAK,CAACO,QAAP,CAAN,GAAyBD,IAAzB;AACD;AACF,KATM,MASA,IAAIN,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;AAChCJ,MAAAA,IAAI,GAAGN,SAAS,CAACS,KAAK,CAACS,IAAP,CAAhB;AACA,UAAIC,KAAK,GAAGV,KAAK,CAACU,KAAlB;AACA,UAAIV,KAAK,CAACW,SAAV,EAAqBD,KAAK,IAAI,aAAT;;AACrB,UAAI,OAAOZ,MAAM,CAACD,IAAD,CAAb,KAAwB,WAA5B,EAAyC;AACvCC,QAAAA,MAAM,CAACD,IAAD,CAAN,GAAea,KAAf;AACD,OAFD,MAEO,IAAIP,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACD,IAAD,CAApB,CAAJ,EAAiC;AACtCC,QAAAA,MAAM,CAACD,IAAD,CAAN,CAAaQ,IAAb,CAAkBK,KAAlB;AACD,OAFM,MAEA;AACLZ,QAAAA,MAAM,CAACD,IAAD,CAAN,GAAe,CAACC,MAAM,CAACD,IAAD,CAAP,EAAea,KAAf,CAAf;AACD;AACF;AACF,GAhCD;AAiCA,SAAOZ,MAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiBjB,OAAjB","sourcesContent":["var camelcase = require('camelcase-css')\n\nfunction atRule (node) {\n  if (typeof node.nodes === 'undefined') {\n    return true\n  } else {\n    return process(node)\n  }\n}\n\nfunction process (node) {\n  var name\n  var result = { }\n\n  node.each(function (child) {\n    if (child.type === 'atrule') {\n      name = '@' + child.name\n      if (child.params) name += ' ' + child.params\n      if (typeof result[name] === 'undefined') {\n        result[name] = atRule(child)\n      } else if (Array.isArray(result[name])) {\n        result[name].push(atRule(child))\n      } else {\n        result[name] = [result[name], atRule(child)]\n      }\n    } else if (child.type === 'rule') {\n      var body = process(child)\n      if (result[child.selector]) {\n        for (var i in body) {\n          result[child.selector][i] = body[i]\n        }\n      } else {\n        result[child.selector] = body\n      }\n    } else if (child.type === 'decl') {\n      name = camelcase(child.prop)\n      var value = child.value\n      if (child.important) value += ' !important'\n      if (typeof result[name] === 'undefined') {\n        result[name] = value\n      } else if (Array.isArray(result[name])) {\n        result[name].push(value)\n      } else {\n        result[name] = [result[name], value]\n      }\n    }\n  })\n  return result\n}\n\nmodule.exports = process\n"]},"metadata":{},"sourceType":"script"}